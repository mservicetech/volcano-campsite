/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mservicetech.campsite.controller;

import com.mservicetech.campsite.model.AvailableDates;
import com.mservicetech.campsite.model.Error;
import java.time.LocalDate;
import com.mservicetech.campsite.model.Reservation;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-10-31T19:42:54.357957500-04:00[America/New_York]")
@Validated
@Api(value = "campsite", description = "the campsite API")
public interface CampsiteApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /campsite : Create resevation for campsite
     *
     * @param reservation Book to add to the store (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "Create resevation for campsite", nickname = "createOrder", notes = "", response = Reservation.class, authorizations = {
        @Authorization(value = "campsite_auth", scopes = {
            @AuthorizationScope(scope = "read:campsite", description = "get campsite"),
            @AuthorizationScope(scope = "write:campsite", description = "modify campsite for reservation") })
         }, tags={ "campsites", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Expected response to a valid request", response = Reservation.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class, responseContainer = "List") })
    @PostMapping(
        value = "/campsite",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Reservation> createOrder(@ApiParam(value = "Book to add to the store" ,required=true )  @Valid @RequestBody Reservation reservation) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"arrival\" : \"2021-01-30T00:00:00.000+0000\", \"client\" : { \"name\" : \"name\", \"id\" : 0, \"email\" : \"email\" }, \"id\" : \"id\", \"departure\" : \"2021-01-30T00:00:00.000+0000\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /campsite/{orderId} : delete a campsite oder
     *
     * @param orderId The id of the resevation for the campsite (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "delete a campsite oder", nickname = "deleteOrder", notes = "", response = Reservation.class, authorizations = {
        @Authorization(value = "campsite_auth", scopes = {
            @AuthorizationScope(scope = "read:campsite", description = "get campsite"),
            @AuthorizationScope(scope = "write:campsite", description = "modify campsite for reservation") })
         }, tags={ "campsites", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Expected response to a valid request", response = Reservation.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class, responseContainer = "List") })
    @DeleteMapping(
        value = "/campsite/{orderId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Reservation> deleteOrder(@ApiParam(value = "The id of the resevation for the campsite",required=true) @PathVariable("orderId") String orderId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"arrival\" : \"2021-01-30T00:00:00.000+0000\", \"client\" : { \"name\" : \"name\", \"id\" : 0, \"email\" : \"email\" }, \"id\" : \"id\", \"departure\" : \"2021-01-30T00:00:00.000+0000\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /campsite/{orderId} : get a campsite oder
     *
     * @param orderId The id of the resevation for the campsite (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "get a campsite oder", nickname = "getOrder", notes = "", response = Reservation.class, authorizations = {
        @Authorization(value = "campsite_auth", scopes = {
            @AuthorizationScope(scope = "read:campsite", description = "get campsite") })
         }, tags={ "campsites", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Expected response to a valid request", response = Reservation.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class, responseContainer = "List") })
    @GetMapping(
        value = "/campsite/{orderId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Reservation> getOrder(@ApiParam(value = "The id of the resevation for the campsite",required=true) @PathVariable("orderId") String orderId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"arrival\" : \"2021-01-30T00:00:00.000+0000\", \"client\" : { \"name\" : \"name\", \"id\" : 0, \"email\" : \"email\" }, \"id\" : \"id\", \"departure\" : \"2021-01-30T00:00:00.000+0000\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /campsite : List all campsites
     *
     * @param startDate start data search critiria (optional)
     * @param endDate end data search critiria (optional)
     * @return An paged array of pets (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "List all campsites", nickname = "listCampsite", notes = "", response = AvailableDates.class, authorizations = {
        @Authorization(value = "campsite_auth", scopes = {
            @AuthorizationScope(scope = "read:campsite", description = "get campsite") })
         }, tags={ "campsites", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "An paged array of pets", response = AvailableDates.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class, responseContainer = "List") })
    @GetMapping(
        value = "/campsite",
        produces = { "application/json" }
    )
    default ResponseEntity<AvailableDates> listCampsite(@ApiParam(value = "start data search critiria") @Valid @RequestParam(value = "startDate", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate startDate,@ApiParam(value = "end data search critiria") @Valid @RequestParam(value = "endDate", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate endDate) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"endDate\" : \"2000-01-23\", \"datelist\" : [ \"2000-01-23\", \"2000-01-23\" ], \"comment\" : \"comment\", \"startDate\" : \"2000-01-23\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /campsite/{orderId} : update campsite order
     *
     * @param orderId The id of the pet to retrieve (required)
     * @param reservation Book to add to the store (required)
     * @return An paged array of pets (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "update campsite order", nickname = "updateCampsiteOrder", notes = "", response = Reservation.class, authorizations = {
        @Authorization(value = "campsite_auth", scopes = {
            @AuthorizationScope(scope = "read:campsite", description = "get campsite"),
            @AuthorizationScope(scope = "write:campsite", description = "modify campsite for reservation") })
         }, tags={ "campsites", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "An paged array of pets", response = Reservation.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class, responseContainer = "List") })
    @PutMapping(
        value = "/campsite/{orderId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Reservation> updateCampsiteOrder(@ApiParam(value = "The id of the pet to retrieve",required=true) @PathVariable("orderId") String orderId,@ApiParam(value = "Book to add to the store" ,required=true )  @Valid @RequestBody Reservation reservation) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"arrival\" : \"2021-01-30T00:00:00.000+0000\", \"client\" : { \"name\" : \"name\", \"id\" : 0, \"email\" : \"email\" }, \"id\" : \"id\", \"departure\" : \"2021-01-30T00:00:00.000+0000\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
